import pandas as pd
from fuzzywuzzy import fuzz, process

# Read the master DataFrame
df_master = pd.read_csv("HFR_with_coordinates.csv")

# Read the hub DataFrame
df_hub = pd.read_csv("ameh_dataset.csv")

# Create a function to find the best match using fuzzywuzzy
def find_best_match(name, candidates):
    # Use process.extractOne to find the best match from candidates
    best_match = process.extractOne(name, candidates, scorer=fuzz.token_sort_ratio)
    
    # Check if the match has a score above a certain threshold (e.g., 80)
    # below 60 it becomes inaccurate
    # > 80 it matches very few
    # 70 is optimum
    if best_match[1] >= 70:
        return best_match[0]
    else:
        return ""

# Create an empty list to store the corrected facility names
corrected_names = []

# Iterate through the hub DataFrame
for name, state in zip(df_hub['facility_name'], df_hub['state']):
    # Filter the master DataFrame by state
    filtered_master = df_master[df_master['state'] == state]

    if not filtered_master.empty:
        # Drop rows with NaN values in the 'facility_name' column
        filtered_master = filtered_master.dropna(subset=['facility_name'])

        # Get a list of candidate facility names in the same state
        candidate_names = filtered_master['facility_name'].tolist()

        # Find the best match using fuzzywuzzy
        best_match = find_best_match(name, candidate_names)
        
        corrected_names.append(best_match)
    else:
        corrected_names.append("")

# Add the corrected names to a new column in the original DataFrame
df_hub['corrected_facility_name'] = corrected_names

# Append a new column "validated_state" based on the condition
df_hub['validated_state'] = df_hub.apply(
    lambda row: row['state'] if row['corrected_facility_name'] != "" else None, 
    axis=1
)

# Save the updated DataFrame to a new CSV file
df_hub.to_csv("./ameh_validated_sites.csv", index=False)
